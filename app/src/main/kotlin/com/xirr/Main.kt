package com.xirr

import com.xirr.calculator.ReturnChartService
import com.xirr.chart.ChartGenerator
import com.xirr.data.CsvDataProvider

fun main() {
    println("=== XIRR Calculator - –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è ===\n")
    
    println("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV...")
    val dataProvider = CsvDataProvider("portfolio_data.csv")
    val snapshots = dataProvider.getPortfolioSnapshots()
    println()
    
    println("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è ===")
    println("–ü–µ—Ä–∏–æ–¥: ${snapshots.first().date} - ${snapshots.last().date}")
    println("–í—Å–µ–≥–æ –¥–Ω–µ–π: ${snapshots.size}")
    
    val totalInvested = snapshots.sumOf { it.cashIn } - snapshots.sumOf { it.cashOut }
    val finalValue = snapshots.last().valuation
    
    println("–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: ${String.format("%,.0f", totalInvested)}")
    println("–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: ${String.format("%,.0f", finalValue)}")
    println("–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${String.format("%,.0f", finalValue - totalInvested)}")
    println("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${String.format("%.2f%%", (finalValue / totalInvested - 1) * 100)}")
    println()
    
    val chartService = ReturnChartService()
    
    // ========== –ì–†–ê–§–ò–ö 1: XIRR (–≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å) ==========
    println("=== –†–∞—Å—á–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ XIRR (–≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å) ===")
    val startTime1 = System.currentTimeMillis()
    val xirrPoints = chartService.buildReturnChart(snapshots)
    val calculationTime1 = (System.currentTimeMillis() - startTime1) / 1000.0
    println("‚úì –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${String.format("%.2f", calculationTime1)} —Å–µ–∫—É–Ω–¥")
    
    val finalXirr = xirrPoints.lastOrNull()
    if (finalXirr != null) {
        println("üéØ –ò—Ç–æ–≥–æ–≤–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (XIRR): ${String.format("%.2f%%", finalXirr.xirrRate * 100)}")
    }
    println()
    
    // ========== –ì–†–ê–§–ò–ö 2: –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ==========
    println("=== –†–∞—Å—á–µ—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–∑–∞ –ø–µ—Ä–∏–æ–¥) ===")
    val startTime2 = System.currentTimeMillis()
    val cumulativePoints = chartService.buildCumulativeReturnChart(snapshots)
    val calculationTime2 = (System.currentTimeMillis() - startTime2) / 1000.0
    println("‚úì –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${String.format("%.2f", calculationTime2)} —Å–µ–∫—É–Ω–¥")
    
    val finalCumulative = cumulativePoints.lastOrNull()
    if (finalCumulative != null) {
        println("üéØ –ò—Ç–æ–≥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥: ${String.format("%.2f%%", finalCumulative.xirrRate * 100)}")
    }
    println()
    
    // ========== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ==========
    println("=== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ===")
    val chartGenerator = ChartGenerator()
    
    try {
        // –ì—Ä–∞—Ñ–∏–∫ 1: XIRR
        val xirrChart = chartGenerator.generateChart(
            xirrPoints, 
            "portfolio_xirr_annual.png", 
            isCumulative = false
        )
        println("‚úì –ì—Ä–∞—Ñ–∏–∫ XIRR (–≥–æ–¥–æ–≤–∞—è): ${xirrChart.absolutePath}")
        
        // –ì—Ä–∞—Ñ–∏–∫ 2: –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è
        val cumulativeChart = chartGenerator.generateChart(
            cumulativePoints, 
            "portfolio_cumulative_return.png", 
            isCumulative = true
        )
        println("‚úì –ì—Ä–∞—Ñ–∏–∫ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: ${cumulativeChart.absolutePath}")
        
    } catch (e: Exception) {
        println("‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: ${e.message}")
        e.printStackTrace()
    }
}