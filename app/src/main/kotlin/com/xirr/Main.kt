package com.xirr

import com.xirr.calculator.ReturnChartService
import com.xirr.chart.ChartGenerator
import com.xirr.data.CsvDataProvider
import java.io.File

fun main(args: Array<String>) {
    println("=".repeat(60))
    println("   üìä XIRR Calculator ‚Äî CSV mode")
    println("=".repeat(60))
    println()

    val csvPath = args.firstOrNull()
        ?: System.getenv("XIRR_CSV_PATH")
        ?: "portfolio_data.csv"

    println("–ò—Å–ø–æ–ª—å–∑—É—é CSV: $csvPath")

    val snapshots = try {
        val provider = CsvDataProvider(csvPath)
        provider.getPortfolioSnapshots()
    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: ${e.message}")
        return
    }

    if (snapshots.isEmpty()) {
        println("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV: $csvPath")
        return
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    println("\n" + "=".repeat(60))
    println("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    println("=".repeat(60))
    println("–ü–µ—Ä–∏–æ–¥: ${snapshots.first().date} - ${snapshots.last().date}")
    println("–í—Å–µ–≥–æ –¥–Ω–µ–π: ${snapshots.size}")

    val totalInvested = snapshots.sumOf { it.cashIn } - snapshots.sumOf { it.cashOut }
    val finalValue = snapshots.last().valuation

    println("–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: ${formatNumber(totalInvested)}")
    println("–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: ${formatNumber(finalValue)}")
    println("–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${formatNumber(finalValue - totalInvested)}")
    println()

    // –†–∞—Å—á—ë—Ç XIRR
    println("‚è≥ –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏...")
    val chartService = ReturnChartService()
    val startTime = System.currentTimeMillis()
    val xirrPoints = chartService.buildReturnChart(snapshots)
    val cumulativePoints = chartService.buildCumulativeReturnChart(snapshots)
    val calculationTime = (System.currentTimeMillis() - startTime) / 1000.0
    println("‚úÖ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${String.format("%.2f", calculationTime)} —Å–µ–∫")
    println()

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    println("=".repeat(60))
    println("   üéØ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    println("=".repeat(60))

    val finalXirr = xirrPoints.lastOrNull()
    val finalCumulative = cumulativePoints.lastOrNull()

    if (finalXirr != null) {
        println("–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (XIRR): ${String.format("%.2f%%", finalXirr.xirrRate * 100)}")
    }
    if (finalCumulative != null) {
        println("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${String.format("%.2f%%", finalCumulative.xirrRate * 100)}")
    }
    println()

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–≤—É—Ö PNG
    println("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    val chartGenerator = ChartGenerator()
    try {
        val xirrFile = chartGenerator.generateChart(xirrPoints, "xirr_annual.png", isCumulative = false)
        println("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: ${File(xirrFile.absolutePath).absolutePath}")

        val cumulativeFile = chartGenerator.generateChart(cumulativePoints, "cumulative_return.png", isCumulative = true)
        println("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: ${File(cumulativeFile.absolutePath).absolutePath}")
    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: ${e.message}")
    }

    // –°–æ–∑–¥–∞—Ç—å CSV —Å –¥–≤—É–º—è –Ω–æ–≤—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ (—á–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π CSV –∏–∑ FS –∏–ª–∏ resources)
    try {
        val origFile = File(csvPath)
        val lines: List<String> = if (origFile.exists()) {
            origFile.readLines(Charsets.UTF_8)
        } else {
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ classpath (resources)
            val resStream = object {}.javaClass.classLoader.getResourceAsStream(csvPath)
            if (resStream != null) {
                resStream.bufferedReader(Charsets.UTF_8).use { it.readLines() }
            } else {
                println("‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π CSV –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ resources: $csvPath")
                // –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ CSV –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ ‚Äî —Å–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSV –∏–∑ snapshots
                val header = "date,valuation,cashIn,cashOut"
                val generated = mutableListOf<String>()
                generated.add(header)
                snapshots.forEach {
                    generated.add("${it.date},${it.valuation},${it.cashIn},${it.cashOut}")
                }
                generated
            }
        }

        if (lines.isEmpty()) {
            println("‚ùå –ü—É—Å—Ç–æ–π –∏—Å—Ö–æ–¥–Ω—ã–π CSV, –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.")
        } else {
            val outName = (File(csvPath).nameWithoutExtension) + "_with_xirr.csv"
            val outFile = File(outName)
            val header = lines.first()
            val newHeader = header + ",xirr_annual,xirr_cumulative"
            val outLines = mutableListOf<String>()
            outLines.add(newHeader)

            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –¥–∞—Ç—ã -> –∏–Ω–¥–µ–∫—Å —Å–Ω–∞–ø—à–æ—Ç–∞
            val dateToIdx = snapshots.mapIndexed { idx, s -> s.date.toString() to idx }.toMap()
            val headerCols = header.split(",")
            val dateColIndex = headerCols.indexOfFirst { it.lowercase().contains("date") }

            if (lines.size - 1 == snapshots.size) {
                for (i in 1 until lines.size) {
                    val snapIdx = i - 1
                    val xirrVal = xirrPoints.getOrNull(snapIdx)?.xirrRate
                    val cumVal = cumulativePoints.getOrNull(snapIdx)?.xirrRate
                    val xirrStr = xirrVal?.let { String.format("%.8f", it) } ?: ""
                    val cumStr = cumVal?.let { String.format("%.8f", it) } ?: ""
                    outLines.add(lines[i] + "," + xirrStr + "," + cumStr)
                }
            } else if (dateColIndex >= 0) {
                for (i in 1 until lines.size) {
                    val cols = lines[i].split(",")
                    val dateVal = cols.getOrNull(dateColIndex)?.trim()?.trim('"')
                    val snapIdx = dateVal?.let { dateToIdx[it] }
                    val xirrVal = snapIdx?.let { xirrPoints.getOrNull(it)?.xirrRate }
                    val cumVal = snapIdx?.let { cumulativePoints.getOrNull(it)?.xirrRate }
                    val xirrStr = xirrVal?.let { String.format("%.8f", it) } ?: ""
                    val cumStr = cumVal?.let { String.format("%.8f", it) } ?: ""
                    outLines.add(lines[i] + "," + xirrStr + "," + cumStr)
                }
            } else {
                println("‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–æ–∫ CSV –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–Ω–∏–º–∫–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–ø–∏—Å–∞—Ç—å –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É.")
                val min = minOf(lines.size - 1, snapshots.size)
                for (i in 1..min) {
                    val snapIdx = i - 1
                    val xirrVal = xirrPoints.getOrNull(snapIdx)?.xirrRate
                    val cumVal = cumulativePoints.getOrNull(snapIdx)?.xirrRate
                    val xirrStr = xirrVal?.let { String.format("%.8f", it) } ?: ""
                    val cumStr = cumVal?.let { String.format("%.8f", it) } ?: ""
                    outLines.add(lines[i] + "," + xirrStr + "," + cumStr)
                }
                if (lines.size - 1 > min) {
                    for (i in (min + 1) until lines.size) {
                        outLines.add(lines[i] + ",,")
                    }
                }
            }

            outFile.writeText(outLines.joinToString("\n"), Charsets.UTF_8)
            println("‚úÖ –°–æ–∑–¥–∞–Ω CSV —Å XIRR: ${outFile.absolutePath}")
        }
    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Å XIRR: ${e.message}")
    }

    println()
    println("=".repeat(60))
    println("   ‚ú® –ì–æ—Ç–æ–≤–æ!")
    println("=".repeat(60))
}

private fun formatNumber(value: Double): String {
    return String.format("%,.0f", value)
}